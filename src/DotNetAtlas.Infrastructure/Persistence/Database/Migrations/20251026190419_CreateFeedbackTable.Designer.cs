// <auto-generated />
using System;
using System.Collections.Generic;
using DotNetAtlas.Infrastructure.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetAtlas.Infrastructure.Persistence.Database.Migrations
{
    [DbContext(typeof(WeatherContext))]
    [Migration("20251026190419_CreateFeedbackTable")]
    partial class CreateFeedbackTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("weather")
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DotNetAtlas.Domain.Entities.Weather.Feedback.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PK");

                    b.Property<Guid>("CreatedByUser")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User who created the feedback.");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2")
                        .HasComment("Creation timestamp (UTC).");

                    b.Property<DateTime>("LastModifiedUtc")
                        .HasColumnType("datetime2")
                        .HasComment("Last modification timestamp (UTC).");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("Optimistic concurrency token.");

                    b.ComplexProperty(typeof(Dictionary<string, object>), "FeedbackText", "DotNetAtlas.Domain.Entities.Weather.Feedback.Feedback.FeedbackText#FeedbackText", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("Feedback")
                                .HasComment("Weather feedback from the user.");
                        });

                    b.ComplexProperty(typeof(Dictionary<string, object>), "Rating", "DotNetAtlas.Domain.Entities.Weather.Feedback.Feedback.Rating#FeedbackRating", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Rating")
                                .HasComment("Rating given by the user.");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUser")
                        .IsUnique()
                        .HasDatabaseName("UX_WeatherFeedback_CreatedByUser");

                    b.ToTable("Feedbacks", "weather", t =>
                        {
                            t.HasComment("Contains user feedbacks about the weather.");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
