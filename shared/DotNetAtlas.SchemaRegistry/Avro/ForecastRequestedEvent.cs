// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen, version 1.12.0+8c27801dc8d42ccc00997f25c0b8f45f8d4a233e
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Weather.Contracts
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using global::Avro;
	using global::Avro.Specific;
	
	/// <summary>
	/// Event about a weather forecast request for a city/country at a given time.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("avrogen", "1.12.0+8c27801dc8d42ccc00997f25c0b8f45f8d4a233e")]
	public partial class ForecastRequestedEvent : global::Avro.Specific.ISpecificRecord
	{
		public static global::Avro.Schema _SCHEMA = global::Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"ForecastRequestedEvent\",\"doc\":\"Event about a weather for" +
				"ecast request for a city/country at a given time.\",\"namespace\":\"Weather.Contract" +
				"s\",\"fields\":[{\"name\":\"City\",\"doc\":\"City name, e.g., \'Prague\'.\",\"type\":\"string\"}," +
				"{\"name\":\"CountryCode\",\"doc\":\"ISO 3166-1 alpha-2 country code, e.g., \'CZ\'.\",\"type" +
				"\":{\"type\":\"enum\",\"name\":\"CountryCode\",\"doc\":\"ISO 3166-1 alpha-2 country codes (u" +
				"ppercase two-letter codes).\",\"namespace\":\"Weather.Contracts\",\"symbols\":[\"CZ\",\"US" +
				"\",\"GB\",\"AD\",\"AE\",\"AF\",\"AG\",\"AI\",\"AL\",\"AM\",\"AO\",\"AQ\",\"AR\",\"AS\",\"AT\",\"AU\",\"AW\",\"AX" +
				"\",\"AZ\",\"BA\",\"BB\",\"BD\",\"BE\",\"BF\",\"BG\",\"BH\",\"BI\",\"BJ\",\"BL\",\"BM\",\"BN\",\"BO\",\"BQ\",\"BR" +
				"\",\"BS\",\"BT\",\"BV\",\"BW\",\"BY\",\"BZ\",\"CA\",\"CC\",\"CD\",\"CF\",\"CG\",\"CH\",\"CI\",\"CK\",\"CL\",\"CM" +
				"\",\"CN\",\"CO\",\"CR\",\"CU\",\"CV\",\"CW\",\"CX\",\"CY\",\"DE\",\"DJ\",\"DK\",\"DM\",\"DO\",\"DZ\",\"EC\",\"EE" +
				"\",\"EG\",\"EH\",\"ER\",\"ES\",\"ET\",\"FI\",\"FJ\",\"FK\",\"FM\",\"FO\",\"FR\",\"GA\",\"GD\",\"GE\",\"GF\",\"GG" +
				"\",\"GH\",\"GI\",\"GL\",\"GM\",\"GN\",\"GP\",\"GQ\",\"GR\",\"GS\",\"GT\",\"GU\",\"GW\",\"GY\",\"HK\",\"HM\",\"HN" +
				"\",\"HR\",\"HT\",\"HU\",\"ID\",\"IE\",\"IL\",\"IM\",\"IN\",\"IO\",\"IQ\",\"IR\",\"IS\",\"IT\",\"JE\",\"JM\",\"JO" +
				"\",\"JP\",\"KE\",\"KG\",\"KH\",\"KI\",\"KM\",\"KN\",\"KP\",\"KR\",\"KW\",\"KY\",\"KZ\",\"LA\",\"LB\",\"LC\",\"LI" +
				"\",\"LK\",\"LR\",\"LS\",\"LT\",\"LU\",\"LV\",\"LY\",\"MA\",\"MC\",\"MD\",\"ME\",\"MF\",\"MG\",\"MH\",\"MK\",\"ML" +
				"\",\"MM\",\"MN\",\"MO\",\"MP\",\"MQ\",\"MR\",\"MS\",\"MT\",\"MU\",\"MV\",\"MW\",\"MX\",\"MY\",\"MZ\",\"NA\",\"NC" +
				"\",\"NE\",\"NF\",\"NG\",\"NI\",\"NL\",\"NO\",\"NP\",\"NR\",\"NU\",\"NZ\",\"OM\",\"PA\",\"PE\",\"PF\",\"PG\",\"PH" +
				"\",\"PK\",\"PL\",\"PM\",\"PN\",\"PR\",\"PS\",\"PT\",\"PW\",\"PY\",\"QA\",\"RE\",\"RO\",\"RS\",\"RU\",\"RW\",\"SA" +
				"\",\"SB\",\"SC\",\"SD\",\"SE\",\"SG\",\"SH\",\"SI\",\"SJ\",\"SK\",\"SL\",\"SM\",\"SN\",\"SO\",\"SR\",\"SS\",\"ST" +
				"\",\"SV\",\"SX\",\"SY\",\"SZ\",\"TC\",\"TD\",\"TF\",\"TG\",\"TH\",\"TJ\",\"TK\",\"TL\",\"TM\",\"TN\",\"TO\",\"TR" +
				"\",\"TT\",\"TV\",\"TW\",\"TZ\",\"UA\",\"UG\",\"UM\",\"UY\",\"UZ\",\"VA\",\"VC\",\"VE\",\"VG\",\"VI\",\"VN\",\"VU" +
				"\",\"WF\",\"WS\",\"YE\",\"YT\",\"ZA\",\"ZM\",\"ZW\"]}},{\"name\":\"Days\",\"doc\":\"Number of days to " +
				"forecast (typical range 1–14).\",\"type\":\"int\"},{\"name\":\"UserId\",\"doc\":\"Optional u" +
				"ser identifier who issued the request (UUID).\",\"default\":null,\"type\":[\"null\",{\"t" +
				"ype\":\"string\",\"logicalType\":\"uuid\"}]},{\"name\":\"RequestedAtUtc\",\"doc\":\"UTC timest" +
				"amp (milliseconds since epoch) when the request was created.\",\"type\":{\"type\":\"lo" +
				"ng\",\"logicalType\":\"timestamp-millis\"}}]}");
		/// <summary>
		/// City name, e.g., 'Prague'.
		/// </summary>
		private string _City;
		/// <summary>
		/// ISO 3166-1 alpha-2 country code, e.g., 'CZ'.
		/// </summary>
		private Weather.Contracts.CountryCode _CountryCode;
		/// <summary>
		/// Number of days to forecast (typical range 1–14).
		/// </summary>
		private int _Days;
		/// <summary>
		/// Optional user identifier who issued the request (UUID).
		/// </summary>
		private System.Nullable<System.Guid> _UserId;
		/// <summary>
		/// UTC timestamp (milliseconds since epoch) when the request was created.
		/// </summary>
		private System.DateTime _RequestedAtUtc;
		public virtual global::Avro.Schema Schema
		{
			get
			{
				return ForecastRequestedEvent._SCHEMA;
			}
		}
		/// <summary>
		/// City name, e.g., 'Prague'.
		/// </summary>
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				this._City = value;
			}
		}
		/// <summary>
		/// ISO 3166-1 alpha-2 country code, e.g., 'CZ'.
		/// </summary>
		public Weather.Contracts.CountryCode CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				this._CountryCode = value;
			}
		}
		/// <summary>
		/// Number of days to forecast (typical range 1–14).
		/// </summary>
		public int Days
		{
			get
			{
				return this._Days;
			}
			set
			{
				this._Days = value;
			}
		}
		/// <summary>
		/// Optional user identifier who issued the request (UUID).
		/// </summary>
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				this._UserId = value;
			}
		}
		/// <summary>
		/// UTC timestamp (milliseconds since epoch) when the request was created.
		/// </summary>
		public System.DateTime RequestedAtUtc
		{
			get
			{
				return this._RequestedAtUtc;
			}
			set
			{
				this._RequestedAtUtc = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.City;
			case 1: return this.CountryCode;
			case 2: return this.Days;
			case 3: return this.UserId;
			case 4: return this.RequestedAtUtc;
			default: throw new global::Avro.AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.City = (System.String)fieldValue; break;
			case 1: this.CountryCode = (Weather.Contracts.CountryCode)fieldValue; break;
			case 2: this.Days = (System.Int32)fieldValue; break;
			case 3: this.UserId = (System.Nullable<System.Guid>)fieldValue; break;
			case 4: this.RequestedAtUtc = (System.DateTime)fieldValue; break;
			default: throw new global::Avro.AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
